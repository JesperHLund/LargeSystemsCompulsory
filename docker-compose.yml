services:
#this service is used to add two numbers
  addition-service:
    build:
      context: .
      dockerfile: additionservice/Dockerfile
    image: addition-service
    ports:
    - "3003:3003"
    networks:
      - calculator-network
    deploy:
      replicas: 3

#this service is used to subtract two numbers
  subtraction-service:
    build:
      context: .
      dockerfile: subtractionservice/Dockerfile
    image: subtraction-service
    ports:
    - "3002:3002"
    networks:
      - calculator-network
    deploy:
      replicas: 3
 
#this service is used to route requests to the other services
  gateway-service:
    build:
      context: .
      dockerfile: gatewayservice/Dockerfile
    image: gateway-service
    ports:
    - "3001:3001"
    networks:
      - calculator-network
    deploy:
      replicas: 3

#this service is used to store the results of the calculations
  database-service:
    build: 
      context: .
      dockerfile: databaseservice/Dockerfile
    image: database-service
    ports:
    - "3004:3004"
    networks:
      - calculator-network 
    deploy:
      replicas: 3

#client-service is a react app that uses the gateway-service to make requests to the other services
  client-service:
    build:
      context: ./Client
      dockerfile: Dockerfile
    image: client-service
    ports:
    - "3000:3000"
    networks:
      - calculator-network
    deploy:
      replicas: 3

#Jaeger is a distributed tracing system
  jaeger:
    image: jaegertracing/all-in-one:1.55
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"

#Database instance
#this is the database that the services use to store the results of the calculations
#it will flood the project folder with a lot of files, as it stores the data in the project folder
#this is done to allow the data to persist between container runs
#this is not a good practice, but it's done to simplify the project
  db:
    image: mysql
    container_name: my-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: largesystemscompulsory
    networks:
      - calculator-network
    ports:
      - "3306:3306"
    volumes:
      - ./mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysql -h localhost -u root -p$MYSQL_ROOT_PASSWORD -e 'SELECT 1'"]
      interval: 10s
      retries: 5
      timeout: 5s
  
# Adminer is a tool for managing content in MySQL databases
#it's just here to setup the database
  adminer:
    image: adminer
    container_name: my-adminer
    networks:
      - calculator-network
    ports:
        - "8080:8080"
    depends_on:
         db:
          condition: service_healthy

#networks are used to connect the services
networks:
#this is the network that all the services are connected to
  calculator-network: